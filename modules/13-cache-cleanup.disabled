#!/bin/bash
#
# Package Cache Cleanup (10-19 priority range)
# Handles cleaning of pacman package cache to free disk space

# Source utils if not already sourced
if ! command -v print_header &>/dev/null; then
    source "$(dirname "$(dirname "$(readlink -f "$0")")")/utils.sh"
fi

# Check if this module can run
check_supported() {
    command -v paccache &>/dev/null
    return $?
}

# Run the update process
run_update() {
    print_header "${TRASH_ICON} CLEANING PACKAGE CACHE"
    
    # Get initial cache size
    local initial_size=$(du -sh /var/cache/pacman/pkg/ 2>/dev/null | cut -f1)
    print_status "${INFO_ICON}" "Current package cache size: $initial_size"
    
    # Clean package cache
    print_status "${SYNC_ICON}" "Cleaning package cache (keeping last 3 versions)..."
    if ! sudo paccache -r; then
        print_error "Failed to clean package cache"
        return 1
    fi
    
    # Remove all cached versions of uninstalled packages
    print_status "${SYNC_ICON}" "Removing cached versions of uninstalled packages..."
    if ! sudo paccache -ruk0; then
        print_warning "Failed to remove uninstalled package cache"
    fi
    
    # Get final cache size
    local final_size=$(du -sh /var/cache/pacman/pkg/ 2>/dev/null | cut -f1)
    print_status "${INFO_ICON}" "Final package cache size: $final_size"
    
    print_success "Package cache cleaned successfully"
    return 0
}

# If script is run directly, check support and run
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    if check_supported; then
        run_update
    else
        echo "Module requirements not met"
        exit 1
    fi
fi
